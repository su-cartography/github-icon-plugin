# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Map Icons
                                 A QGIS Plugin
 This plugin provides a wide range of map icons with metadata display
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-03-25
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Syracuse University
        email                : bdasari@syr.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

"""
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys
import inspect

from qgis.PyQt.QtWidgets import QAction, QMenu
from qgis.PyQt.QtGui import QIcon
from qgis.core import QgsApplication

# Import the dialog class
from .map_icons_dialog import mapIconsDialog


class mapIcons:
    """
    Main plugin class for Map Icons.
    
    This plugin provides a comprehensive collection of map icons with metadata display.
    Users can browse through icons, view their metadata, and apply selected icons
    to point layers in QGIS.
    
    Features:
    - Grid display of icons with primary tag labels
    - Comprehensive metadata display (designer, uploader, creation info, etc.)
    - Icon selection and application to map layers
    - Organized display: icons with labels first, then without labels
    """

    def __init__(self, iface):
        """
        Initialize the plugin.
        
        Args:
            iface: QGIS interface instance
        """
        # Save reference to the QGIS interface
        self.iface = iface
        
        # Store the plugin directory for resource management
        self.plugin_dir = os.path.dirname(__file__)
        
        # Initialize plugin state
        self.actions = []
        self.menu = self.tr(u'&Map Icons')
        self.first_start = None

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """
        Add a toolbar action to the toolbar.
        
        Args:
            icon_path: Path to the icon for this action
            text: Text that should be shown in menu items for this action
            callback: Function to be called when the action is triggered
            enabled_flag: A flag indicating if the action should be enabled by default
            add_to_menu: Flag indicating whether the action should also be added to the menu
            add_to_toolbar: Flag indicating whether the action should also be added to the toolbar
            status_tip: Optional text to show in a popup when mouse pointer hovers over the action
            whats_this: Optional text to show in the status bar when mouse pointer hovers over the action
            parent: Parent widget for the new action
        """
        # Create the action
        if icon_path:
            # Convert icon path to QIcon object
            icon = QIcon(icon_path)
            action = QAction(icon, text, parent)
        else:
            action = QAction(text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        # Set tooltip and status tip
        if status_tip is not None:
            action.setStatusTip(status_tip)
        if whats_this is not None:
            action.setWhatsThis(whats_this)

        # Add the action to the appropriate menus and toolbars
        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)
        if add_to_menu:
            # Adds plugin menu item to Plugins menu
            self.iface.addPluginToMenu(self.menu, action)

        # Store the action for later reference
        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        # Create the main action for the plugin
        icon = os.path.join(
            os.path.dirname(__file__),
            'icon.png')
        
        # Add the action to the toolbar and menu
        self.add_action(
            icon,
            text=self.tr(u'Map Icons'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Remove the plugin menu item and icon from QGIS GUI."""
        # Remove all actions from the toolbar and menu
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Map Icons'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """
        Run method that performs all the real work.
        
        This method:
        1. Creates the dialog (only once)
        2. Shows the dialog
        3. Handles the result when user selects an icon
        4. Applies the selected icon to the active point layer
        """
        # Create the dialog only once
        if self.first_start:
            self.first_start = False
            self.dlg = mapIconsDialog()

        # Show the dialog
        self.dlg.show()
        result = self.dlg.exec_()

        # Handle the result
        if result == 1:  # QDialog.Accepted
            # User selected an icon, get the symbol
            symbol = self.dlg.get_selected_icon_symbol()
            
            if symbol:
                # Get the currently active layer
                layer = self.iface.activeLayer()
                
                if layer and layer.geometryType() == 0:  # 0 = Point geometry
                    # Apply the icon symbol to the layer
                    renderer = layer.renderer()
                    renderer.setSymbol(symbol)
                    layer.triggerRepaint()
                    
                    # Show success message
                    self.iface.messageBar().pushSuccess(
                        "Map Icons", 
                        f"Icon '{self.dlg.icon_metadata.get(self.dlg.selected_icon.split('/')[-1], {}).get('uuid', 'Unknown')}' applied to layer '{layer.name()}'"
                    )
                else:
                    # Show warning if no point layer is selected
                    self.iface.messageBar().pushWarning(
                        "Map Icons", 
                        "Please select a point layer to apply the icon."
                    )
            else:
                # Show warning if no icon was selected
                self.iface.messageBar().pushWarning(
                    "Map Icons", 
                    "No icon was selected."
                )

    def tr(self, message):
        """
        Get the translation for a string using Qt translation API.
        
        Args:
            message: String for translation
            
        Returns:
            Translated string
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QgsApplication.translate('MapIcons', message)
