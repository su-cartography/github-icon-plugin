# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Map Icons Dialog
                                 A QGIS Plugin
 This plugin provides a wide range of map icons with metadata display
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-03-25
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Syracuse University
        email                : bdasari@syr.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import csv
import logging

from qgis.PyQt import uic, QtWidgets, QtGui
from qgis.PyQt.QtCore import Qt, QSize
from qgis.PyQt.QtWidgets import QLabel, QGridLayout, QMessageBox

# Try to import Excel reading libraries for metadata loading
try:
    from openpyxl import load_workbook
    OPENPYXL_AVAILABLE = True
except ImportError:
    OPENPYXL_AVAILABLE = False

# Add the plugin directory to Python path for resources_rc import
import sys
plugin_dir = os.path.dirname(__file__)
if plugin_dir not in sys.path:
    sys.path.insert(0, plugin_dir)

import resources_rc

# Import local modules
from .config import (
    MAX_ICONS_PER_ROW, 
    ICON_SIZE, 
    BUTTON_SIZE, 
    LABEL_MAX_WIDTH, 
    LABEL_MIN_HEIGHT,
    LABEL_STYLE
)
from .data_manager import DataManager

# Load the UI definition file
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'map_icons_dialog_base.ui'))


class mapIconsDialog(QtWidgets.QDialog, FORM_CLASS):
    """
    Main dialog class for the Map Icons plugin.
    
    This dialog displays a grid of map icons with their primary tags as labels.
    Icons with primary tags are displayed first, followed by icons without labels.
    Users can select icons to view detailed metadata in the right panel.
    """
    
    def __init__(self, parent=None):
        """Initialize the dialog and load icons with metadata."""
        super(mapIconsDialog, self).__init__(parent)
        
        # Set up the UI
        self.setupUi(self)
        
        # Initialize instance variables
        self.selected_icon = None      # Store the currently selected icon path
        self.icon_buttons = []         # Keep references to buttons for highlighting
        self.icon_metadata = {}        # Store comprehensive metadata for each icon
        self.data_manager = None       # Data manager for Zenodo downloads
        
        # Ensure metadata panel is hidden by default
        self.metadataPanel.setVisible(False)
        
        # Connect Cancel button to clear selection
        self.button_box.rejected.connect(self.on_cancel_clicked)
        
        # Initialize data manager and ensure data is available
        self.initialize_data()
        
        # Load metadata and icons
        if self.data_manager:
            self.load_metadata()
            self.load_icons()
        else:
            self.show_error_message("Failed to initialize data manager")
    
    def initialize_data(self):
        """Initialize data manager and ensure required data is available."""
        try:
            self.data_manager = DataManager(os.path.dirname(__file__))
            
            # Show progress dialog for data download
            progress_dialog = QtWidgets.QProgressDialog(
                "Checking and downloading required data...", 
                "Cancel", 
                0, 
                0, 
                self
            )
            progress_dialog.setWindowTitle("Map Icons Plugin")
            progress_dialog.setModal(True)
            progress_dialog.show()
            
            # Ensure data is available
            if not self.data_manager.ensure_data_available():
                progress_dialog.close()
                self.show_error_message(
                    "Failed to download required data from Zenodo. "
                    "Please check your internet connection and try again."
                )
                return
            
            progress_dialog.close()
            
        except Exception as e:
            logging.error(f"Failed to initialize data manager: {e}")
            self.show_error_message(f"Failed to initialize data manager: {e}")
    
    def show_error_message(self, message):
        """Show an error message to the user."""
        QMessageBox.critical(self, "Error", message)

    def on_cancel_clicked(self):
        """Handle Cancel button click - hide metadata panel and clear selection."""
        self.clear_selection()

    def load_metadata(self):
        """
        Load comprehensive metadata from the Excel file downloaded from Zenodo.
        
        The Excel file contains:
        - UUID: The unique identifier for each icon
        - Filename: The PNG filename of the icon
        - Primary Tag: The descriptive category for the icon (shown as label)
        - Designer: Who created the icon
        - Uploader: Who uploaded the icon
        - When Created: Creation date
        - Where Created: Location where icon was created
        - Notes: Additional information
        - Source: Source of the icon (boston_workshop)
        """
        if not self.data_manager:
            logging.error("Data manager not initialized")
            return
        
        logging.info("=== Loading metadata from Excel file ===")
        
        # Get metadata file path from data manager
        metadata_file = self.data_manager.get_metadata_file()
        logging.info(f"Metadata file path: {metadata_file}")
        logging.info(f"Metadata file exists: {metadata_file.exists()}")
        
        if not metadata_file.exists():
            logging.error(f"Metadata file not found: {metadata_file}")
            self.show_error_message("Metadata file not found. Please check data download.")
            return
        
        try:
            # Load the Excel file
            if not OPENPYXL_AVAILABLE:
                logging.error("openpyxl library not available for Excel reading")
                self.show_error_message(
                    "Excel reading library (openpyxl) not available. "
                    "Please install it: pip install openpyxl"
                )
                return
            
            workbook = load_workbook(metadata_file, read_only=True)
            worksheet = workbook.active
            
            # Extract headers from first row
            headers = [cell.value for cell in worksheet[1]]
            
            # Find column indices
            uuid_idx = headers.index('uuid') if 'uuid' in headers else 0
            filename_idx = headers.index('filename') if 'filename' in headers else 1
            primary_tag_idx = headers.index('primary_tag') if 'primary_tag' in headers else 2
            designer_idx = headers.index('designer') if 'designer' in headers else 3
            uploader_idx = headers.index('uploader') if 'uploader' in headers else 4
            when_created_idx = headers.index('when_created') if 'when_created' in headers else 5
            where_created_idx = headers.index('where_created') if 'where_created' in headers else 6
            notes_idx = headers.index('notes') if 'notes' in headers else 7
            source_idx = headers.index('source') if 'source' in headers else 8
            
            # Load metadata from rows
            self.icon_metadata = {}
            for row in worksheet.iter_rows(min_row=2):
                if len(row) > max(uuid_idx, filename_idx, primary_tag_idx):
                    filename = str(row[filename_idx].value) if row[filename_idx].value else ""
                    
                    if filename and filename.lower().endswith('.png'):
                        # Extract metadata fields
                        metadata = {
                            'uuid': str(row[uuid_idx].value) if row[uuid_idx].value else "",
                            'primary_tag': str(row[primary_tag_idx].value) if row[primary_tag_idx].value else "",
                            'designer': str(row[designer_idx].value) if row[designer_idx].value else "",
                            'uploader': str(row[uploader_idx].value) if row[uploader_idx].value else "",
                            'when_created': str(row[when_created_idx].value) if row[when_created_idx].value else "",
                            'where_created': str(row[where_created_idx].value) if row[where_created_idx].value else "",
                            'notes': str(row[notes_idx].value) if row[notes_idx].value else "",
                            'source': str(row[source_idx].value) if row[source_idx].value else ""
                        }
                        
                        # Store metadata indexed by filename
                        self.icon_metadata[filename] = metadata
            
            workbook.close()
            
            logging.info(f"Successfully loaded metadata for {len(self.icon_metadata)} icons")
            
        except Exception as e:
            logging.error(f"Error loading metadata from Excel file: {e}")
            import traceback
            traceback.print_exc()
            self.icon_metadata = {}
            self.show_error_message(f"Failed to load metadata: {e}")

    def load_icons(self):
        """
        Load and display all icons in a grid layout.
        
        Icons are organized as follows:
        1. Icons with primary tags are displayed first
        2. Icons without primary tags are displayed after
        3. Each icon with a label shows the icon above and label below
        4. Icons without labels show only the icon button
        """
        print("=== Loading icons into grid layout ===")
        
        # Get the grid layout from the UI
        layout: QGridLayout = self.iconLayout
        max_columns = MAX_ICONS_PER_ROW  # Number of icons per row
        
        # Get all icon files from the data manager
        if not self.data_manager:
            logging.error("Data manager not initialized")
            return
        
        icons_dir = self.data_manager.get_icons_directory()
        if not icons_dir.exists():
            logging.error(f"Icons directory not found: {icons_dir}")
            self.show_error_message("Icons directory not found. Please check data download.")
            return
        
        icon_files = [f.name for f in icons_dir.glob("*.png")]
        icon_files.sort()  # Sort alphabetically for consistent display
        logging.info(f"Found {len(icon_files)} icon files")
        
        # Check if metadata was loaded successfully
        logging.info(f"icon_metadata attribute exists: {hasattr(self, 'icon_metadata')}")
        if hasattr(self, 'icon_metadata'):
            logging.info(f"icon_metadata has {len(self.icon_metadata)} items")
        else:
            logging.warning("WARNING: icon_metadata attribute not found!")

        # Separate icons into two categories: with labels and without labels
        icons_with_labels = []
        icons_without_labels = []
        
        # Process each icon file
        for icon_file in icon_files:
            # Get metadata for this icon
            if icon_file in self.icon_metadata:
                metadata = self.icon_metadata[icon_file]
                primary_tag = metadata.get('primary_tag', '')
                
                # Use primary_tag as the display name for the icon label
                display_name = primary_tag if primary_tag and primary_tag.strip() else None
                
                logging.info(f"  {icon_file} -> '{display_name}' (Primary Tag: '{primary_tag}')")
            else:
                logging.info(f"  {icon_file} -> not found in mapping")
                display_name = None
            
            # Categorize the icon
            if display_name:
                icons_with_labels.append((icon_file, display_name))
            else:
                icons_without_labels.append(icon_file)
        
        logging.info(f"Icons with labels: {len(icons_with_labels)}")
        logging.info(f"Icons without labels: {len(icons_without_labels)}")
        
        # Display icons in the grid layout
        row, col = 0, 0
        
        # First, display all icons with labels
        for icon_file, display_name in icons_with_labels:
            self._create_icon_widget(layout, icon_file, display_name, row, col)
            
            # Move to next position in grid
            col += 1
            if col >= max_columns:
                col = 0
                row += 1
        
        # Then, display all icons without labels
        for icon_file in icons_without_labels:
            self._create_icon_widget(layout, icon_file, None, row, col)
            
            # Move to next position in grid
            col += 1
            if col >= max_columns:
                col = 0
                row += 1

    def _create_icon_widget(self, layout, icon_file, display_name, row, col):
        """
        Create a widget containing an icon button and optionally a label.
        
        Args:
            layout: The grid layout to add the widget to
            icon_file: The filename of the icon
            display_name: The display name to show as label (None if no label)
            row: Grid row position
            col: Grid column position
        """
        # Create container widget with vertical layout
        container = QtWidgets.QWidget()
        container_layout = QtWidgets.QVBoxLayout(container)
        container_layout.setContentsMargins(2, 2, 2, 2)
        container_layout.setSpacing(2)
        
        # Create the icon button
        btn = QtWidgets.QPushButton()
        icon_path = self.data_manager.get_icons_directory() / icon_file
        btn.setIcon(QtGui.QIcon(str(icon_path)))
        btn.setIconSize(QSize(ICON_SIZE, ICON_SIZE))
        btn.setFixedSize(BUTTON_SIZE, BUTTON_SIZE)
        btn.setCheckable(True)
        
        # Connect button click to icon selection
        btn.clicked.connect(lambda checked, path=icon_path, b=btn, filename=icon_file: 
                          self.select_icon(path, b, filename))
        
        # Add button to container (always add the button)
        container_layout.addWidget(btn)
        
        # Add label below button if display name exists
        if display_name:
            title_label = QtWidgets.QLabel(display_name)
            title_label.setAlignment(Qt.AlignCenter)
            title_label.setWordWrap(True)
            title_label.setMaximumWidth(LABEL_MAX_WIDTH)
            title_label.setMinimumHeight(LABEL_MIN_HEIGHT)
            # Use styling from configuration
            title_label.setStyleSheet(LABEL_STYLE)
            container_layout.addWidget(title_label)
        
        # Add container to grid layout
        layout.addWidget(container, row, col)
        self.icon_buttons.append(btn)

    def select_icon(self, icon_path, button, filename):
        """
        Handle icon selection when a button is clicked.
        
        Args:
            icon_path: Full path to the selected icon
            button: The button that was clicked
            filename: The filename of the selected icon
        """
        # Store the selected icon
        self.selected_icon = icon_path
        
        # Uncheck all other buttons (single selection)
        for btn in self.icon_buttons:
            if btn is not button:
                btn.setChecked(False)
        
        # Show metadata panel and update display
        self.metadataPanel.setVisible(True)
        self.update_metadata_display(filename, icon_path)

    def update_metadata_display(self, filename, icon_path):
        """
        Update the metadata panel with information for the selected icon.
        
        Args:
            filename: The filename of the selected icon
            icon_path: Full path to the selected icon
        """
        # Update icon preview in the metadata panel
        pixmap = QtGui.QPixmap(icon_path)
        if not pixmap.isNull():
            scaled_pixmap = pixmap.scaled(150, 150, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            self.iconPreviewLabel.setPixmap(scaled_pixmap)
        else:
            self.iconPreviewLabel.setText("Icon preview not available")
        
        # Get metadata for the selected icon
        if filename in self.icon_metadata:
            metadata = self.icon_metadata[filename]
            
            # Extract metadata fields
            uuid = metadata.get('uuid', '')
            primary_tag = metadata.get('primary_tag', '')
            secondary_tags = metadata.get('secondary_tags', '')
            designer = metadata.get('designer', '')
            uploader = metadata.get('uploader', '')
            when_created = metadata.get('when_created', '')
            when_uploaded = metadata.get('when_uploaded', '')
            where_created = metadata.get('where_created', '')
            icon_geography = metadata.get('icon_geography', '')
            icon_context = metadata.get('icon_context', '')
            creation_context = metadata.get('creation_context', '')
            notes = metadata.get('notes', '')
            source = metadata.get('source', '')
            
            # Display primary tag as the main information (this is what users see when clicked)
            if primary_tag and primary_tag.strip():
                self.codeValue.setText(primary_tag)
            else:
                self.codeValue.setText("No category")
            
            # Display designer information
            self.createdByValue.setText(designer if designer else "Unknown")
            
            # Display other metadata fields
            self.createdValue.setText(when_created if when_created else "-")
            self.modifiedByValue.setText(uploader if uploader else "-")
            self.modifiedValue.setText(where_created if where_created else "-")
            
            # Add notes display if available
            if hasattr(self, 'notesLabel'):
                self.notesLabel.setText(notes if notes else "No additional notes")
            if hasattr(self, 'sourceLabel'):
                self.sourceLabel.setText(source if source else "Unknown source")
        else:
            # Icon not found in mapping - show basic information
            self.codeValue.setText("No category")
            self.createdByValue.setText(filename)
            self.createdValue.setText("-")
            self.modifiedByValue.setText("-")
            self.modifiedValue.setText("-")
            
            # Clear additional fields if they exist
            if hasattr(self, 'notesLabel'):
                self.notesLabel.setText("No notes available")
            if hasattr(self, 'sourceLabel'):
                self.sourceLabel.setText("Unknown source")

    def get_selected_icon_symbol(self):
        """
        Return a QgsMarkerSymbol using the selected icon, or None if nothing is selected.
        
        This method is used by the main plugin to apply the selected icon to a map layer.
        
        Returns:
            QgsMarkerSymbol: A marker symbol using the selected PNG icon, or None
        """
        if not self.selected_icon:
            return None
            
        try:
            from qgis.core import QgsMarkerSymbol, QgsRasterMarkerSymbolLayer
            
            # Create a marker symbol using the selected PNG icon
            symbol = QgsMarkerSymbol.createSimple({
                'name': 'circle',  # fallback shape
                'size': '6',
                'color': '0,0,0,0'  # transparent, so only the image shows
            })
            
            # Use a raster marker symbol layer for PNG
            raster_layer = QgsRasterMarkerSymbolLayer(self.selected_icon, 6)
            symbol.changeSymbolLayer(0, raster_layer)
            
            return symbol
            
        except ImportError:
            print("QGIS core modules not available")
            return None

    def clear_selection(self):
        """Clear the current icon selection and hide metadata panel."""
        self.selected_icon = None
        
        # Uncheck all buttons
        for btn in self.icon_buttons:
            btn.setChecked(False)
        
        # Hide metadata panel
        self.metadataPanel.setVisible(False)
